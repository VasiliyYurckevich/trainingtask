import groovy.sql.Sql

buildscript {
    repositories {
        mavenCentral()
    }
    ext {
        hsqldbVersion = "2.5.1"

    }
    dependencies {
        classpath "org.hsqldb:hsqldb:${hsqldbVersion}"
    }
}

ext {
    dbName = "mydb"
    dbUser = "SA"
    dbPassword = ""
    dbPort = 9001
    dbHost = "localhost"
    dbFile = "mydb"
    dbUrl = "jdbc:hsqldb:hsql://localhost/mydb;"
    dbDrive = "org.hsqldb.jdbc.JDBCDriver"
    className = "org.hsqldb.server.Server"
}

tasks.register('startDatabase') {
    logging.captureStandardOutput(LogLevel.LIFECYCLE)
    outputs.upToDateWhen {
        return !isAvailable()
    }

    doLast {
        def filePath = "file:${projectDir}/${this.dbFile};user=${this.dbUser};password=${this.dbPassword}"

        def process = buildProcess(this.className, filePath, this.dbName)
        wait(process)

        executeSql(new File("${projectDir}/sql-scripts/create.sql").text)
    }
}

def buildProcess(className, filePath, dbName) {
    String javaBin = System.getProperty("java.home") + File.separator + "bin" + File.separator + "java"
    String classpath = project.buildscript.configurations.classpath.asPath

    def builder = new ProcessBuilder(javaBin, "-cp", classpath, className as String,
            "--database.0", filePath as String, "--dbname.0", dbName as String)

    builder.redirectErrorStream(true)
    builder.directory(projectDir)
    def process = builder.start()
    process
}

def wait(Process process) {
    def ready = "From command line, use [Ctrl]+[C] to abort abruptly"
    def reader = new BufferedReader(new InputStreamReader(process.getInputStream()))

    def line
    while ((line = reader.readLine()) != null) {
        logger.quiet line as String
        if (line.contains(ready)) {
            break
        }
    }
}

tasks.register('dropDatabase') {
    outputs.upToDateWhen {
        return isAvailable()
    }
    doLast {
        executeSql(new File("${projectDir}/sql-scripts/drop.sql").text)
    }
}

tasks.register('fillDatabase') {
    outputs.upToDateWhen {
        return isAvailable()
    }
    doLast {
        executeSql(new File("${projectDir}/sql-scripts/fill.sql").text)
    }
}

tasks.register('stopDatabase') {
    outputs.upToDateWhen {
        return isAvailable()
    }
    doLast {
        executeSql("SHUTDOWN;")
    }
}

boolean isAvailable() {
    try {
        Socket ignored = new Socket(this.dbHost, this.dbPort)
        ignored.close()
        return false
    }
    catch (IOException ignored) {
        return true
    }
}

def executeSql(String query) {
    ClassLoader loader = Sql.class.classLoader
    project.buildscript.configurations.classpath.each { File file ->
        loader.addURL(file.toURI().toURL())
    }

    Sql sql = Sql.newInstance(this.dbUrl, this.dbUser, this.dbPassword, this.dbDrive) as Sql
    sql.execute(query)
    sql.close()
}
import groovy.sql.Sql

ext {
    def dbName = "mydb"
    dbUser = "SA"
    dbPassword = ""
    dbPort = 9001
    dbHost = "localhost"
    dbFile = "mydb"
    dbUrl = "jdbc:hsqldb:hsql://localhost/mydb;"
    dbDrive = "org.hsqldb.jdbc.JDBCDriver"
    className = "org.hsqldb.server.Server"
}

task startDatabase() {
    outputs.upToDateWhen {
        return !isAvailable()
    }

    doLast {
        def filePath = "file:${projectDir}/${this.dbFile};user=${this.dbUser};password=${this.dbPassword}"

        def process = buildProcess(this.className, filePath, this.dbName)
        wait(process)
        createDatabaseTables(this.dbUser, this.dbPassword)
    }
}

def buildProcess(className, filePath, dbName) {
    def javaHome = System.getProperty("java.home")
    def javaBin = javaHome + File.separator + "bin" + File.separator + "java"
    def classpath = project.buildscript.configurations.classpath.asPath

    def builder = new ProcessBuilder(javaBin, "-cp", classpath, className,
            "--database.0", filePath, "--dbname.0", dbName as String)

    builder.redirectErrorStream(true)
    builder.directory(projectDir)
    def process = builder.start()
    process
}

def wait(Process process) {
    def ready = "From command line, use [Ctrl]+[C] to abort abruptly"
    def reader = new BufferedReader(new InputStreamReader(process.getInputStream()))

    def line
    while ((line = reader.readLine()) != null) {
        logger.quiet line
        if (line.contains(ready)) {
            break
        }
    }
}

def createDatabaseTables(dbUser, dbPassword) {

    project.buildscript.configurations.classpath.each { File file ->
        Sql.class.classLoader.addURL(file.toURI().toURL())
    }

    String query = new File("${rootDir.absolutePath}/sql-scripts/create.sql").text

    Sql sql = Sql.newInstance(this.dbUrl, dbUser, dbPassword, this.dbDrive) as Sql
    sql.execute(query)
    sql.close()
}

task dropDatabase() {
    outputs.upToDateWhen {
        return isAvailable()
    }

    doLast {
        ClassLoader loader = Sql.class.classLoader
        project.buildscript.configurations.classpath.each { File file ->
            loader.addURL(file.toURI().toURL())
        }

        String query = new File("${rootDir.absolutePath}/sql-scripts/drop.sql").text

        Sql sql = Sql.newInstance(this.dbUrl, this.dbUser, this.dbPassword, this.dbDrive) as Sql
        println(sql.execute(query))
        sql.close()
    }
}

task fillDatabase() {
    group = "develop"
    outputs.upToDateWhen {
        return isAvailable()
    }
    doLast {
        ClassLoader loader = Sql.class.classLoader
        project.buildscript.configurations.classpath.each { File file ->
            loader.addURL(file.toURI().toURL())
        }

        String query = new File("${rootDir.absolutePath}/sql-scripts/fill.sql").text

        Sql sql = Sql.newInstance(this.dbUrl, this.dbUser, this.dbPassword, this.dbDrive) as Sql
        sql.execute(query)
        sql.close()
    }
}

task stopDatabase() {
    outputs.upToDateWhen {
        return isAvailable()
    }
    doLast {

        ClassLoader loader = Sql.class.classLoader
        project.buildscript.configurations.classpath.each { File file ->
            loader.addURL(file.toURI().toURL())
        }

        Sql sql = Sql.newInstance(this.dbUrl, this.dbUser, this.dbPassword, this.dbDrive) as Sql
        sql.execute("SHUTDOWN;")
        sql.close()
    }
}

boolean isAvailable() {
    try {
        Socket ignored = new Socket(this.dbHost, this.dbPort)
        ignored.close()
        return false
    }
    catch (IOException ignored) {
        return true
    }
}
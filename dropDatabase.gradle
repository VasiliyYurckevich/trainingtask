import groovy.sql.Sql

task dropDatabase() {
    group = 'develop'
    outputs.upToDateWhen {
        return available()
    }
    doLast {
        def dbUser = project.properties['dbUser'] ?: gradle.dbUser
        def dbPassword = project.properties['dbPassword'] ?: gradle.dbPassword
        def dbUrl = project.properties['dbUrl'] ?: gradle.dbUrl
        def dbDrive = project.properties['dbDrive'] ?: gradle.dbDrive

        ClassLoader loader = Sql.class.classLoader
        project.buildscript.configurations.classpath.each { File file ->
            loader.addURL(file.toURI().toURL())
        }

        String query = new File("${rootDir.absolutePath}/sql-scripts/drop.sql").text

        Sql sql = Sql.newInstance(dbUrl, dbUser, dbPassword, dbDrive) as Sql
        sql.execute(query)
        sql.close()
    }
}

boolean available() {
    try {
        int dbPort = project.properties['dbPort'] ?: gradle.dbPort as int
        String dbHost = project.properties['dbHost'] ?: gradle.dbHost
        Socket ignored = new Socket(dbHost, dbPort)
        ignored.close()
        return false
    }
    catch (IOException ignored) {
        return true
    }
}